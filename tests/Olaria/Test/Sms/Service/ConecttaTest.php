<?php

namespace Api\Test\Sms\Service\Gateway;

use Api\Sms\Entity\Category;
use Api\Sms\Entity\Gateway;
use Api\Sms\Entity\Sms;
use Api\Sms\Service\Gateway\Conectta;

class ConecttaTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Conectta
     */
    protected $object;

    public function setUp()
    {
        $this->object = new Conectta(
            ['username' => $_SERVER['CONECTTA_USER'], 'password' => $_SERVER['CONECTTA_PASSWORD']]
        );
    }

    public function testCreateService()
    {
        $this->assertInstanceOf('Api\Sms\Service\Gateway\Conectta', new Conectta([]));
    }

    public function testHasCreditTrue()
    {
        $this->assertTrue($this->object->hasCredit());
    }

    public function testHasCreditFalse()
    {
        $this->assertFalse($this->object->hasCredit(99999999999));
    }

    public function testSendSuccess()
    {
        $sms = $this->getMock('Api\Sms\Entity\Sms', array('getId'));
        $sms
            ->expects($this->any())
            ->method('getId')
            ->will($this->returnValue(uniqid("test_")));

        $sms->setDdd('71');
        $sms->setNumber('91898583');
        $sms->setMessage('Message generated by unit test.');
        $sms->setSignature('Unit Test');
        $sms->setStatus(Sms::SMS_STATUS_CREATED);
        $sms->setType(Sms::SMS_TYPE_OUT);
        $sms->setCategory(new Category());
        $sms->setGateway(new Gateway());
        $sms->setSms(new Sms());

        $this->assertEquals(Sms::SMS_STATUS_SCHEDULE, $this->object->send($sms));
    }

    /**
     * @depends testSendSuccess
     */
    public function testStatus()
    {
        $id = uniqid("test_");
        $sms = $this->getMock('Api\Sms\Entity\Sms', array('getId'));
        $sms
            ->expects($this->any())
            ->method('getId')
            ->will($this->returnValue($id));

        $sms->setDdd('71');
        $sms->setNumber('91898583');
        $sms->setMessage('Message generated by unit test.');
        $sms->setSignature('Unit Test Service');
        $sms->setStatus(Sms::SMS_STATUS_CREATED);
        $sms->setType(Sms::SMS_TYPE_OUT);
        $sms->setCategory(new Category());
        $sms->setGateway(new Gateway());
        $sms->setSms(new Sms());

        $this->assertEquals(Sms::SMS_STATUS_SCHEDULE, $this->object->send($sms));
        $this->assertEquals(Sms::SMS_STATUS_SCHEDULE, $this->object->status($sms));
    }
}
