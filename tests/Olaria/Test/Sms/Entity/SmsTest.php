<?php

namespace Api\Test\Sms\Entity;

use Api\Sms\Entity\Category;
use Api\Sms\Entity\Gateway;
use Api\Sms\Entity\Sms;

class SmsTest extends \PHPUnit_Framework_TestCase
{
    public function testCreateObject()
    {
        $this->assertInstanceOf('Api\Sms\Entity\Sms', new Sms());
    }

    public function testClassHasAllAttributes()
    {
        $reflection = new \ReflectionClass('Api\Sms\Entity\Sms');
        $properties = $reflection->getProperties();
        $this->assertCount(13, $properties);

        foreach ($properties as $property) {
            $this->assertContains(
                $property->getName(),
                [
                    'id',
                    'ddd',
                    'number',
                    'message',
                    'signature',
                    'status',
                    'type',
                    'category',
                    'gateway',
                    'sms',
                    'schedule',
                    'created',
                    'updated'
                ]
            );
        }
    }

    public function testSetAndGetValues()
    {
        $object = new Sms();
        $object->setDdd('71');
        $object->setNumber('88971306');
        $object->setMessage('Message generated by unit test.');
        $object->setSignature('Unit Test');
        $object->setStatus(Sms::SMS_STATUS_CREATED);
        $object->setType(Sms::SMS_TYPE_IN);
        $object->setCategory(new Category());
        $object->setGateway(new Gateway());
        $object->setSms(new Sms());

        $dateTime = new \DateTime('now');
        $object->setSchedule($dateTime);

        $this->assertEquals('71', $object->getDdd());
        $this->assertEquals('88971306', $object->getNumber());
        $this->assertEquals('Message generated by unit test.', $object->getMessage());
        $this->assertEquals('Unit Test', $object->getSignature());
        $this->assertEquals(Sms::SMS_STATUS_CREATED, $object->getStatus());
        $this->assertEquals(Sms::SMS_TYPE_IN, $object->getType());
        $this->assertInstanceOf('\DateTime', $object->getSchedule());
        $this->assertEquals($dateTime, $object->getSchedule());
        $this->assertInstanceOf('Api\Sms\Entity\Category', $object->getCategory());
        $this->assertInstanceOf('Api\Sms\Entity\Gateway', $object->getGateway());
        $this->assertInstanceOf('Api\Sms\Entity\Sms', $object->getSms());
    }

    public function testSetNotACategory()
    {
        try {
            $object = new Sms();
            $object->setCategory(new \stdClass());
        } catch (\Exception $e) {
            return;
        }

        $this->fail('An fatal error has not been raised.');
    }

    public function testSetNotAGateway()
    {
        try {
            $object = new Sms();
            $object->setGateway(new \stdClass());
        } catch (\Exception $e) {
            return;
        }

        $this->fail('An fatal error has not been raised.');
    }

    public function testSetNotASms()
    {
        try {
            $object = new Sms();
            $object->setSms(new \stdClass());
        } catch (\Exception $e) {
            return;
        }

        $this->fail('An fatal error has not been raised.');
    }

    public function testSetNotADatetime()
    {
        try {
            $object = new Sms();
            $object->setSchedule(new \stdClass());
        } catch (\Exception $e) {
            return;
        }

        $this->fail('An fatal error has not been raised.');
    }
}
